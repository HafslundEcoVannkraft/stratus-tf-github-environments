# Minimal configuration for GitHub Environments
# This is the simplest possible configuration to get started
#
# This example demonstrates:
# - Basic repository and environment setup
# - Metadata for deployment-specific configuration
# - Essential security configurations
# - Minimal approval requirements

repositories:
  - repo: your-app-repo  # Replace with your actual GitHub repository name
    environments:
      # Basic development environment with minimal restrictions
      - name: apps-prod-ci
        wait_timer: 0               # No wait time for development
        prevent_self_review: false  # Allow self-approval for quick iteration
        reviewers:
          users: []                 # No required reviewers for development
          teams: []
        # No deployment policy = any branch can deploy
        metadata:
          deployment_target: ace1  # Maps to "ace1" metadata key in remote terraform state github_environments output

      # Production environment with basic protections
      - name: apps-prod-cd
        wait_timer: 10              # Brief wait to prevent accidental deployments
        prevent_self_review: true   # Require approval from someone else
        reviewers:
          users:
            - username: "your-admin-username"  # Replace with actual GitHub username
          teams: []
        metadata:
          deployment_target: ace1  # Maps to "ace1" key in remote state environments

# Quick Setup Notes:
# 1. Replace "your-app-repo" with your actual GitHub repository name
# 2. Replace "your-admin-username" with a real GitHub username who should approve production deployments
# 3. Ensure the remote state contains "dev" and "prod" environments with proper configuration
# 4. This creates 2 GitHub environments with automatic Azure OIDC federation
# 5. Variables and role assignments come from the remote state automatically
# 6. The metadata.deployment_target maps to deployment targets in your remote state

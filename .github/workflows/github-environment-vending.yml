name: GitHub Environment Vending for Azure deployment

on:
  workflow_dispatch:
    inputs:
      github_env_file:
        description: "Filename of GitHub environment config (optional, defaults to github-environments.yaml)"
        required: false
        type: string
        default: "github-environments.yaml"
      tfvars_file:
        description: "Filename of tfvars file (required, will be searched for recursively in the repository)"
        required: true
        type: string
      github_token:
        description: "GitHub token with repo, workflow and read:org permissions (required)"
        required: true
        type: string
      github_owner:
        description: "GitHub organization or user name (optional, defaults to HafslundEcoVannkraft)"
        required: false
        type: string
        default: "HafslundEcoVannkraft"
      iac_repo_ref:
        description: "Git reference (branch, tag, or commit SHA) of the IaC repository to checkout (optional, defaults to main)"
        required: false
        type: string
        default: "main"
      remote_state_config:
        description: 'Optional remote state override: rg=name,sa=name,container=name,key=name (e.g., "key=custom.tfstate" or "rg=custom-rg,key=custom.tfstate")'
        required: false
        type: string
      module_repo_ref:
        description: "Git reference (branch, tag, or commit SHA) of the module repository (optional, defaults to main)"
        required: false
        type: string
        default: "main"
      operation:
        description: "Operation to perform (apply or destroy)"
        required: false
        type: choice
        options:
          - apply
          - destroy
        default: "apply"

permissions:
  id-token: write
  contents: read

jobs:
  prepare:
    name: Prepare Deployment Files
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: terraform-work
    outputs:
      environment: ${{ steps.copy_files.outputs.environment }}
      tfvars_file: ${{ steps.copy_files.outputs.tfvars_file }}
      cache_key: ${{ steps.create_cache_key.outputs.cache_key }}
      tf_workspace: ${{ steps.copy_files.outputs.tf_workspace }}
    steps:
      # Checkout the IaC repository where you copied this workflow, we need the tfvars file
      - name: Checkout IaC repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.iac_repo_ref }}

      # Checkout the public Terraform module repo into a subfolder
      - name: Checkout public module
        uses: actions/checkout@v4
        with:
          repository: HafslundEcoVannkraft/stratus-tf-github-environments
          ref: ${{ github.event.inputs.module_repo_ref }}
          path: ${{ env.TF_WORKSPACE }}

      # Find and copy the tfvars and environment YAML file to ${{ env.TF_WORKSPACE }}
      # and append required variables to the tfvars file.
      - name: Find and copy tfvars and env file
        id: copy_files
        run: |
          # Always try to find the file recursively if not found at the given path
          TFVARS_FILE="${{ github.event.inputs.tfvars_file }}"
          if [ ! -f "$TFVARS_FILE" ]; then
            # Try to find by full path match (relative to repo root)
            FOUND_TFVARS=$(find . -path "*/$TFVARS_FILE" -type f | head -n 1)
            if [ -z "$FOUND_TFVARS" ]; then
              # Fallback: search by basename only
              FOUND_TFVARS=$(find . -name "$(basename "$TFVARS_FILE")" -type f | head -n 1)
            fi
            if [ -n "$FOUND_TFVARS" ]; then
              TFVARS_FILE="$FOUND_TFVARS"
            else
              echo "Error: tfvars file not found for input $TFVARS_FILE"
              exit 1
            fi
          fi

          # Find the GitHub environment YAML file
          ENV_FILE="${{ github.event.inputs.github_env_file }}"
          if [ ! -f "$ENV_FILE" ]; then
            # Try to find by full path match (relative to repo root)
            FOUND_ENV=$(find . -path "*/$ENV_FILE" -type f | head -n 1)
            if [ -z "$FOUND_ENV" ]; then
              # Fallback: search by basename only
              FOUND_ENV=$(find . -name "$(basename "$ENV_FILE")" -type f | head -n 1)
            fi
            if [ -n "$FOUND_ENV" ]; then
              ENV_FILE="$FOUND_ENV"
            else
              echo "Error: Could not find GitHub environment file '$ENV_FILE' in repository"
              exit 1
            fi
          fi

          # Copy both files to ${{ env.TF_WORKSPACE }}
          cp "$TFVARS_FILE" ${{ env.TF_WORKSPACE }}/
          TFVARS_FILE="${{ env.TF_WORKSPACE }}/$(basename "$TFVARS_FILE")"
          cp "$ENV_FILE" ${{ env.TF_WORKSPACE }}/
          ENV_FILE="${{ env.TF_WORKSPACE }}/$(basename "$ENV_FILE")"

          # Extract variables from tfvars file
          CODE_NAME=$(grep 'code_name' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          ENVIRONMENT=$(grep 'environment' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')

          # Ensure the file ends with a newline before appending
          tail -c1 "$TFVARS_FILE" | read -r _ || echo >> "$TFVARS_FILE"

          {
            echo "github_owner = \"${{ github.event.inputs.github_owner }}\""
            echo "github_env_file = \"$(basename "$ENV_FILE")\""
            echo "module_repo_ref = \"${{ github.event.inputs.module_repo_ref }}\""
            echo "iac_repo_url = \"${{ github.server_url }}/${{ github.repository }}\""

            # Parse remote_state_config if provided (format: rg=name,sa=name,container=name,key=name)
            if [ -n "${{ github.event.inputs.remote_state_config }}" ]; then
              REMOTE_STATE_CONFIG="${{ github.event.inputs.remote_state_config }}"

              # Parse each key=value pair
              IFS=',' read -ra PAIRS <<< "$REMOTE_STATE_CONFIG"
              for pair in "${PAIRS[@]}"; do
                if [[ $pair == rg=* ]]; then
                  echo "remote_state_resource_group_name = \"${pair#rg=}\""
                elif [[ $pair == sa=* ]]; then
                  echo "remote_state_storage_account_name = \"${pair#sa=}\""
                elif [[ $pair == container=* ]]; then
                  echo "remote_state_container = \"${pair#container=}\""
                elif [[ $pair == key=* ]]; then
                  echo "remote_state_key = \"${pair#key=}\""
                fi
              done
            fi
          } >> "$TFVARS_FILE"

          # Set outputs for downstream jobs
          echo "environment=$ENVIRONMENT" | tee -a "$GITHUB_OUTPUT" "$GITHUB_ENV"
          echo "code_name=$CODE_NAME" | tee -a "$GITHUB_OUTPUT" "$GITHUB_ENV"
          echo "tfvars_file=$(basename $TFVARS_FILE)" | tee -a "$GITHUB_OUTPUT"
          echo "tf_workspace=$TF_WORKSPACE" | tee -a "$GITHUB_OUTPUT"

      # We only need terrform for formatting, not for plan or apply
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TF_WORKSPACE }}
        run: terraform fmt --recursive
        continue-on-error: false

      - name: Create the cache key
        id: create_cache_key
        working-directory: ${{ env.TF_WORKSPACE }}
        run: |
          # sha1sum is used to create a unique cache key for the ${{ env.TF_WORKSPACE }} directory
          hash_files=$(find . -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d' ' -f1)
          echo "cache_key=$code_name-$environment-$hash_files" | tee -a "$GITHUB_OUTPUT" "$GITHUB_ENV"

      # Cache the ${{ env.TF_WORKSPACE }} directory as we need it for both plan and apply
      - name: Cache ${{ env.TF_WORKSPACE }}
        uses: actions/cache@v4.2.3
        with:
          key: ${{ steps.create_cache_key.outputs.cache_key }}
          path: ${{ env.TF_WORKSPACE }}

  plan:
    needs: prepare
    permissions:
      actions: read
      contents: read
      pull-requests: write
      id-token: write
    uses: HafslundEcoVannkraft/stratus-lz-workflows/.github/workflows/lz_tf_plan.yaml@v2
    name: ${{ needs.prepare.outputs.environment }} Plan
    with:
      path: ${{ needs.prepare.outputs.tf_workspace }}
      tf_version: latest
      tf_key: github_environments_${{ needs.prepare.outputs.environment }}
      tf_vars_file: ${{ needs.prepare.outputs.tfvars_file }}
      gh_environment: ${{ needs.prepare.outputs.environment }}-plan
      runner: stratus-github-hosted
      do-destroy: ${{ github.event.inputs.operation == 'destroy' }}
      cache_key: ${{ needs.prepare.outputs.cache_key }}
      cache_path: ${{ needs.prepare.outputs.tf_workspace }}
      github_token: ${{ github.event.inputs.github_token }}

  apply:
    if: github.event.inputs.operation == 'apply'
    needs: [prepare, plan]
    permissions:
      actions: read
      contents: read
      pull-requests: write
      id-token: write
    uses: HafslundEcoVannkraft/stratus-lz-workflows/.github/workflows/lz_tf_apply.yaml@v2
    name: ${{ needs.prepare.outputs.environment }} Apply
    with:
      path: ${{ needs.prepare.outputs.tf_workspace }}
      tf_version: latest
      tf_key: github_environments_${{ needs.prepare.outputs.environment }}
      tf_vars_file: ${{ needs.prepare.outputs.tfvars_file }}
      gh_environment: ${{ needs.prepare.outputs.environment }}-apply
      runner: stratus-github-hosted
      cache_key: ${{ needs.prepare.outputs.cache_key }}
      cache_path: ${{ needs.prepare.outputs.tf_workspace }}
      github_token: ${{ github.event.inputs.github_token }}
